// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: csvparser/csv-parser.proto

package grpc_test_drive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CSVParserClient is the client API for CSVParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSVParserClient interface {
	CountRows(ctx context.Context, in *CSVParserRequest, opts ...grpc.CallOption) (*CSVParserResponse, error)
}

type cSVParserClient struct {
	cc grpc.ClientConnInterface
}

func NewCSVParserClient(cc grpc.ClientConnInterface) CSVParserClient {
	return &cSVParserClient{cc}
}

func (c *cSVParserClient) CountRows(ctx context.Context, in *CSVParserRequest, opts ...grpc.CallOption) (*CSVParserResponse, error) {
	out := new(CSVParserResponse)
	err := c.cc.Invoke(ctx, "/CSVParser/CountRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSVParserServer is the server API for CSVParser service.
// All implementations must embed UnimplementedCSVParserServer
// for forward compatibility
type CSVParserServer interface {
	CountRows(context.Context, *CSVParserRequest) (*CSVParserResponse, error)
	mustEmbedUnimplementedCSVParserServer()
}

// UnimplementedCSVParserServer must be embedded to have forward compatible implementations.
type UnimplementedCSVParserServer struct {
}

func (UnimplementedCSVParserServer) CountRows(context.Context, *CSVParserRequest) (*CSVParserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRows not implemented")
}
func (UnimplementedCSVParserServer) mustEmbedUnimplementedCSVParserServer() {}

// UnsafeCSVParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSVParserServer will
// result in compilation errors.
type UnsafeCSVParserServer interface {
	mustEmbedUnimplementedCSVParserServer()
}

func RegisterCSVParserServer(s grpc.ServiceRegistrar, srv CSVParserServer) {
	s.RegisterService(&CSVParser_ServiceDesc, srv)
}

func _CSVParser_CountRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSVParserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSVParserServer).CountRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSVParser/CountRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSVParserServer).CountRows(ctx, req.(*CSVParserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CSVParser_ServiceDesc is the grpc.ServiceDesc for CSVParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSVParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CSVParser",
	HandlerType: (*CSVParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountRows",
			Handler:    _CSVParser_CountRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csvparser/csv-parser.proto",
}
